// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-macosx10.10 -enable-objc-interop -O -module-name ScadeKit
import CoreFoundation
@_exported import ScadeKit
import Swift
extension EClass {
  @objc dynamic public var interface: Swift.Bool {
    @objc get
    @objc set(val)
  }
}
extension EStructuralFeature {
  public var volatile: Swift.Bool {
    get
    set(val)
  }
}
extension SCDGraphicsPoint {
  public convenience init(x: Swift.Int = 0, y: Swift.Int = 0)
}
extension SCDGraphicsPointF {
  public convenience init(x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDGraphicsDimension {
  public convenience init(width: Swift.Int = 0, height: Swift.Int = 0)
}
extension SCDGraphicsRectangle {
  public convenience init(location: ScadeKit.SCDGraphicsPoint = SCDGraphicsPoint(), bounds: ScadeKit.SCDGraphicsDimension = SCDGraphicsDimension())
}
extension SCDGraphicsRGB {
  public convenience init(red: Swift.Int = 0, green: Swift.Int = 0, blue: Swift.Int = 0, alpha: Swift.Int = 255)
}
extension SCDPlatformCameraOptions {
  public convenience init(sourceType: ScadeKit.SCDPlatformCameraSourceType = .camera)
}
extension SCDPlatformLocationCoordinate {
  public convenience init(latitude: Swift.Double = 0.0, longitude: Swift.Double = 0.0)
}
extension SCDSvgBox {
  public convenience init(preserveAspectRatio: ScadeKit.SCDSvgAspectRatio = .meet, alignment: ScadeKit.SCDSvgBoxAlignment = .xmidymid, location: ScadeKit.SCDGraphicsPoint = SCDGraphicsPoint(), size: ScadeKit.SCDGraphicsDimension = SCDGraphicsDimension(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit(), width: ScadeKit.SCDSvgUnit = SCDSvgUnit(), height: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgGroup {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix())
}
extension SCDSvgPath {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix())
}
extension SCDSvgLine {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), x1: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y1: ScadeKit.SCDSvgUnit = SCDSvgUnit(), x2: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y2: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgRect {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit(), width: ScadeKit.SCDSvgUnit = SCDSvgUnit(), height: ScadeKit.SCDSvgUnit = SCDSvgUnit(), rx: ScadeKit.SCDSvgUnit = SCDSvgUnit(), ry: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgCircle {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), cx: ScadeKit.SCDSvgUnit = SCDSvgUnit(), cy: ScadeKit.SCDSvgUnit = SCDSvgUnit(), r: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgEllipse {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), cx: ScadeKit.SCDSvgUnit = SCDSvgUnit(), cy: ScadeKit.SCDSvgUnit = SCDSvgUnit(), rx: ScadeKit.SCDSvgUnit = SCDSvgUnit(), ry: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgPolyline {
  public convenience init(closed: Swift.Bool = false, matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix())
  @objc dynamic public var points: Swift.Array<Swift.Float> {
    @objc get
    @objc set(val)
  }
}
extension SCDSvgTextSpan {
  public convenience init(anchor: ScadeKit.SCDSvgTextAnchor = .start, alignmentBaseline: ScadeKit.SCDSvgTextAlignmentBaseline = .alphabetic, alignment: ScadeKit.SCDSvgTextAlignment = .left)
}
extension SCDSvgText {
  public convenience init(anchor: ScadeKit.SCDSvgTextAnchor = .start, alignmentBaseline: ScadeKit.SCDSvgTextAlignmentBaseline = .alphabetic, alignment: ScadeKit.SCDSvgTextAlignment = .left, matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgUse {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit(), width: ScadeKit.SCDSvgUnit = SCDSvgUnit(), height: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgImage {
  public convenience init(preserveAspectRatio: ScadeKit.SCDSvgAspectRatio = .meet, alignment: ScadeKit.SCDSvgBoxAlignment = .xmidymid, matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit(), width: ScadeKit.SCDSvgUnit = SCDSvgUnit(), height: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgSymbol {
  public convenience init(preserveAspectRatio: ScadeKit.SCDSvgAspectRatio = .meet, alignment: ScadeKit.SCDSvgBoxAlignment = .xmidymid)
}
extension SCDSvgPattern {
  public convenience init(preserveAspectRatio: ScadeKit.SCDSvgAspectRatio = .meet, alignment: ScadeKit.SCDSvgBoxAlignment = .xmidymid, width: ScadeKit.SCDSvgUnit = SCDSvgUnit(), height: ScadeKit.SCDSvgUnit = SCDSvgUnit(), x: ScadeKit.SCDSvgUnit = SCDSvgUnit(), y: ScadeKit.SCDSvgUnit = SCDSvgUnit())
}
extension SCDSvgScrollGroup {
  public convenience init(width: Swift.Int = 0, height: Swift.Int = 0, type: ScadeKit.SCDSvgScrollType = .vertical)
}
extension SCDSvgClipPath {
  public convenience init(matrix: ScadeKit.SCDSvgMatrix = SCDSvgMatrix())
}
extension SCDSvgUnit {
  public convenience init(value: Swift.Float = 0.0, measurement: ScadeKit.SCDSvgMeasurement = .pixel)
}
extension SCDSvgPathElement {
  public convenience init(absolute: Swift.Bool = true)
}
extension SCDSvgPathMove {
  public convenience init(x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathLine {
  public convenience init(x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathHLine {
  public convenience init(x: Swift.Float = 0.0)
}
extension SCDSvgPathVLine {
  public convenience init(y: Swift.Float = 0.0)
}
extension SCDSvgPathCubic {
  public convenience init(x1: Swift.Float = 0.0, y1: Swift.Float = 0.0, x2: Swift.Float = 0.0, y2: Swift.Float = 0.0, x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathSCubic {
  public convenience init(x2: Swift.Float = 0.0, y2: Swift.Float = 0.0, x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathQuadratic {
  public convenience init(x1: Swift.Float = 0.0, y1: Swift.Float = 0.0, x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathSQuadratic {
  public convenience init(x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathElliptical {
  public convenience init(rx: Swift.Float = 0.0, ry: Swift.Float = 0.0, angle: Swift.Float = 0.0, largeArc: Swift.Bool = false, sweep: Swift.Bool = false, x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgPathClose {
  public convenience init(x: Swift.Float = 0.0, y: Swift.Float = 0.0)
}
extension SCDSvgStylable {
  public var strokeDashArray: Swift.Array<Swift.Float> {
    get
    set(val)
  }
}
extension SCDSvgRGBColor {
  public convenience init(r: Swift.Float = 0.0, g: Swift.Float = 0.0, b: Swift.Float = 0.0, a: Swift.Float = 1.0)
}
extension SCDSvgStop {
  public convenience init(color: ScadeKit.SCDSvgColor, offset: Swift.Float = 0.0, opacity: Swift.Float = 1.0)
}
extension SCDSvgTapGestureRecognizer {
  public convenience init(numTaps: Swift.Int = 1)
}
extension SCDSvgValueInterpolator {
  @objc dynamic public var times: Swift.Array<Swift.Float> {
    @objc get
    @objc set(val)
  }
}
extension SCDSvgCubicTimeFunction {
  public convenience init(x1: Swift.Float = 0.0, y1: Swift.Float = 0.0, x2: Swift.Float = 0.0, y2: Swift.Float = 0.0)
}
extension SCDSvgSplineTimeFunction {
  @objc dynamic public var keyTimes: Swift.Array<Swift.Float> {
    @objc get
    @objc set(val)
  }
}
extension SCDWidgetsWidget {
  public convenience init(location: ScadeKit.SCDGraphicsPoint = SCDGraphicsPoint(), size: ScadeKit.SCDGraphicsDimension = SCDGraphicsDimension())
}
extension SCDWidgetsList {
  @objc dynamic public var template: ScadeKit.SCDWidgetsListTemplate {
    @objc get
    @objc set(val)
  }
}
extension SCDWidgetsSlider {
  @objc dynamic public var template: ScadeKit.SCDWidgetsWidget {
    @objc get
    @objc set(val)
  }
}
extension SCDWidgetsMapRegion {
  public convenience init(latitudinalMeters: Swift.Double = 0.0, longitudinalMeters: Swift.Double = 0.0, center: ScadeKit.SCDPlatformLocationCoordinate = SCDPlatformLocationCoordinate())
}
extension SCDWidgetsMapAnnotation {
  public convenience init(location: ScadeKit.SCDPlatformLocationCoordinate = SCDPlatformLocationCoordinate())
}
extension SCDRuntime {
  public static func loadService<T>(_ path: Swift.String) -> T?
  public static func loadService<T>(_ path: Swift.String, withAuth: ScadeKit.SCDServiceAuth) -> T?
}
extension EObject {
  public static var eClass: ScadeKit.EClass {
    get
  }
  public func observe<T>(of property: Swift.PartialKeyPath<T>, callback: @escaping (ScadeKit.SCDNotification) -> Swift.Void) -> ScadeKit.SCDObserver?
}
public func from<E>(_ source: E) -> ScadeKit.BindingElement<E> where E : ScadeKit.EObject
public enum BindingSelectorPosition {
  case at(_: Swift.Int)
  case all
}
public struct BindingElement<T> {
  fileprivate let path: ScadeKit.BindingPath
  fileprivate let metaType: T.Type
  public func select<V>(_ path: Swift.KeyPath<T, V>) -> ScadeKit.BindingElement<V>
  public func select<V>(_ path: Swift.KeyPath<T, [V]>, _ at: ScadeKit.BindingSelectorPosition) -> ScadeKit.BindingElement<V>
  public func select<V>(_ path: Swift.KeyPath<T, V?>) -> ScadeKit.BindingElement<V>
  public func select<E, V>(_ path: Swift.KeyPath<E, V>) -> ScadeKit.BindingElement<V>
  public func select<E, V>(_ path: Swift.KeyPath<E, [V]>, _ at: ScadeKit.BindingSelectorPosition) -> ScadeKit.BindingElement<V>
  public func select<E, V>(_ path: Swift.KeyPath<E, V?>) -> ScadeKit.BindingElement<V>
  public func cast<V>(_ type: V.Type) -> ScadeKit.BindingElement<V>
  public func bind(to element: ScadeKit.BindingElement<T>) -> ScadeKit.SCDBindingBinding
  public func bind<V>(to element: ScadeKit.BindingElement<V>, mapFunction: @escaping (T) -> V) -> ScadeKit.SCDBindingBinding
  public func bind<V>(to element: ScadeKit.BindingElement<V>, mapFunction: @escaping (T, Swift.Int) -> V) -> ScadeKit.SCDBindingBinding
}
extension SCDSvgPropertyAnimation {
  public convenience init(_ key: Swift.String, valueFunction: @escaping (Swift.Float) -> Any)
  public convenience init(_ key: Swift.String, from: Any, to: Any)
  public convenience init(_ key: Swift.String, values: [Any])
  public convenience init(_ key: Swift.String, values: [Any], times: [Swift.Float])
}
extension SCDSvgMotionAnimation {
  public convenience init(_ path: ScadeKit.SCDSvgPath, pointFunction: @escaping (Swift.Float) -> Any)
  public convenience init(_ path: ScadeKit.SCDSvgPath, values: [Any])
  public convenience init(_ path: ScadeKit.SCDSvgPath, values: [Any], times: [Swift.Float])
}
postfix operator %
extension Int {
  postfix public static func % (value: Swift.Int) -> ScadeKit.SCDSvgUnit
}
extension Float {
  postfix public static func % (value: Swift.Float) -> ScadeKit.SCDSvgUnit
}
extension SCDSvgUnit : Swift.ExpressibleByIntegerLiteral, Swift.ExpressibleByFloatLiteral {
  required public convenience init(integerLiteral value: Swift.Int)
  required public convenience init(floatLiteral value: Swift.Float)
  public typealias IntegerLiteralType = Swift.Int
  public typealias FloatLiteralType = Swift.Float
}
public typealias SCDColor = ScadeKit.SCDSvgRGBColor
public struct SCDColorComponent {
  internal let value: Swift.Float
  @_hasInitialValue public static var maxValue: ScadeKit.SCDColorComponent
}
extension SCDSvgRGBColor {
  public convenience init(css: Swift.String)
  public convenience init(red: Swift.Float, green: Swift.Float, blue: Swift.Float, alpha: Swift.Float = 1)
  public convenience init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, alpha: Swift.Int = 255)
  public convenience init(red: ScadeKit.SCDColorComponent, green: ScadeKit.SCDColorComponent, blue: ScadeKit.SCDColorComponent, alpha: ScadeKit.SCDColorComponent = .maxValue)
  public convenience init(rgb: Swift.Int, alpha: Swift.Int = 255)
  public convenience init(rgb: Swift.Int, alpha: Swift.Float)
  public convenience init(rgba: Swift.Int)
  public var red: Swift.Int {
    get
    set(value)
  }
  public var green: Swift.Int {
    get
    set(value)
  }
  public var blue: Swift.Int {
    get
    set(value)
  }
  public var alpha: Swift.Int {
    get
    set(value)
  }
}
extension SCDSvgColor {
  @_hasInitialValue public static var aliceblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var antiquewhite: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var aqua: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var aquamarine: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var azure: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var beige: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var bisque: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var black: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var blanchedalmond: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var blue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var blueviolet: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var brown: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var burlywood: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var cadetblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var chartreuse: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var chocolate: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var coral: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var cornflowerblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var cornsilk: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var crimson: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var cyan: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkcyan: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkgoldenrod: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkgray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkgreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkgrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkkhaki: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkmagenta: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkolivegreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkorange: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkorchid: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkred: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darksalmon: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkseagreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkslateblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkslategray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkslategrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkturquoise: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var darkviolet: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var deeppink: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var deepskyblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var dimgray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var dimgrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var dodgerblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var firebrick: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var floralwhite: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var forestgreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var fuchsia: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var gainsboro: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var ghostwhite: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var gold: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var goldenrod: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var gray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var grey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var green: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var greenyellow: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var honeydew: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var hotpink: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var indianred: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var indigo: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var ivory: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var khaki: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lavender: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lavenderblush: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lawngreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lemonchiffon: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightcoral: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightcyan: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightgoldenrodyellow: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightgray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightgreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightgrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightpink: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightsalmon: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightseagreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightskyblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightslategray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightslategrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightsteelblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lightyellow: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var lime: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var limegreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var linen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var magenta: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var maroon: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumaquamarine: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumorchid: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumpurple: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumseagreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumslateblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumspringgreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumturquoise: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mediumvioletred: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var midnightblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mintcream: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var mistyrose: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var moccasin: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var navajowhite: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var navy: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var oldlace: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var olive: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var olivedrab: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var orange: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var orangered: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var orchid: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var palegoldenrod: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var palegreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var paleturquoise: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var palevioletred: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var papayawhip: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var peachpuff: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var peru: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var pink: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var plum: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var powderblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var purple: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var red: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var rosybrown: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var royalblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var saddlebrown: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var salmon: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var sandybrown: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var seagreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var seashell: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var sienna: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var silver: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var skyblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var slateblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var slategray: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var slategrey: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var snow: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var springgreen: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var steelblue: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var tan: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var teal: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var thistle: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var tomato: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var turquoise: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var violet: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var wheat: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var white: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var whitesmoke: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var yellow: ScadeKit.SCDSvgRGBColor
  @_hasInitialValue public static var yellowgreen: ScadeKit.SCDSvgRGBColor
}
postfix operator %
extension Int {
  postfix public static func % (value: Swift.Int) -> ScadeKit.SCDColorComponent
}
extension SCDWidgetsDatePicker {
  public var date: Foundation.Date {
    get
    set(value)
  }
}
